#include "win_to_str.cpp"

int main() {
    // Register all functions
    register_base();

    INT intVal = reinterpret_cast<INT>(0x12345678);
    INT_PTR intPtrVal = static_cast<INT_PTR>(0x23456789);
    INT8 int8Val = static_cast<INT8>(0x34567890);
    INT16 int16Val = static_cast<INT16>(0x45678901);
    INT32 int32Val = reinterpret_cast<INT32>(0x56789012);
    INT64 int64Val = static_cast<INT64>(0x67890123);
    LANGID langidVal = static_cast<LANGID>(0x78901234);
    LCID lcidVal = static_cast<LCID>(0x89012345);
    LCTYPE lctypeVal = static_cast<LCTYPE>(0x90123456);
    LGRPID lgrpidVal = static_cast<LGRPID>(0xA0123456);
    LONG longVal = static_cast<LONG>(0xB1234567);
    LONGLONG longLongVal = static_cast<LONGLONG>(0xC2345678);
    LONG_PTR longPtrVal = static_cast<LONG_PTR>(0xD3456789);
    LONG32 long32Val = static_cast<LONG32>(0xE4567890);
    LONG64 long64Val = static_cast<LONG64>(0xF5678901);
    LPARAM lparamVal = static_cast<LPARAM>(0x12345678);
    BOOL validBool = TRUE;
    LPBOOL lpboolVal = &validBool;
    LPBYTE lpbyteVal = reinterpret_cast<LPBYTE>(0x34567890);
    // LPCOLORREF lpcolorrefVal = reinterpret_cast<LPCOLORREF>(0x45678901);
    LPCSTR lpstrVal = reinterpret_cast<LPCSTR>(0x56789012);
    LPCTSTR lptstrVal = reinterpret_cast<LPCTSTR>(0x67890123);
    LPCVOID lpvoidVal = reinterpret_cast<LPCVOID>(0x78901234);
    LPCWSTR lpcwstrVal = reinterpret_cast<LPCWSTR>(0x89012345);
    LPDWORD lpdwordVal = reinterpret_cast<LPDWORD>(0x90123456);
    LPHANDLE lphandleVal = reinterpret_cast<LPHANDLE>(0xA0123456);
    LPINT lpintVal = reinterpret_cast<LPINT>(0xB1234567);
    LPLONG lplongVal = reinterpret_cast<LPLONG>(0xC2345678);
    LPSTR lpstr2Val = reinterpret_cast<LPSTR>(0xD3456789);
    LPTSTR lptstr2Val = reinterpret_cast<LPTSTR>(0xE4567890);
    LPVOID lpvoid2Val = reinterpret_cast<LPVOID>(0xF5678901);
    LPWORD lpwordVal = reinterpret_cast<LPWORD>(0x12345678);
    LPWSTR lpwstrVal = reinterpret_cast<LPWSTR>(0x23456789);
    LRESULT lresultVal = static_cast<LRESULT>(0x34567890);
    PBOOL pboolVal = reinterpret_cast<PBOOL>(0x45678901);
    PBOOLEAN pbooleanVal = reinterpret_cast<PBOOLEAN>(0x56789012);
    PBYTE pbyteVal = reinterpret_cast<PBYTE>(0x67890123);
    PCHAR pcharVal = reinterpret_cast<PCHAR>(0x78901234);
    PCSTR pcstrVal = reinterpret_cast<PCSTR>(0x89012345);
    // PCTSTR pctsVal = reinterpret_cast<PCTSTR>(0x90123456);
    PCWSTR pcwstrVal = reinterpret_cast<PCWSTR>(0xA0123456);
    PDWORD pdwordVal = reinterpret_cast<PDWORD>(0xB1234567);
    PDWORDLONG pdwordlongVal = reinterpret_cast<PDWORDLONG>(0xC2345678);
    PDWORD_PTR pdwordptrVal = reinterpret_cast<PDWORD_PTR>(0xD3456789);
    PDWORD32 pdword32Val = reinterpret_cast<PDWORD32>(0xE4567890);
    PDWORD64 pdword64Val = reinterpret_cast<PDWORD64>(0xF5678901);
    PFLOAT pfloatVal = reinterpret_cast<PFLOAT>(0x12345678);
    PHALF_PTR phalfPtrVal = reinterpret_cast<PHALF_PTR>(0x23456789);
    PHANDLE phandleVal = reinterpret_cast<PHANDLE>(0x34567890);
    PHKEY phkeyVal = reinterpret_cast<PHKEY>(0x45678901);
    PINT pintVal = reinterpret_cast<PINT>(0x56789012);
    PINT_PTR pintPtrVal = reinterpret_cast<PINT_PTR>(0x67890123);
    // PINT8 pint8Val = reinterpret_cast<PINT8>(0x78901234);
    // PINT16 pint16Val = reinterpret_cast<PINT16>(0x89012345);
    PINT32 pint32Val = reinterpret_cast<PINT32>(0x90123456);
    PINT64 pint64Val = reinterpret_cast<PINT64>(0xA0123456);
    PLCID plcidVal = reinterpret_cast<PLCID>(0xB1234567);
    PLONG plongVal = reinterpret_cast<PLONG>(0xC2345678);
    PLONGLONG plonglongVal = reinterpret_cast<PLONGLONG>(0xD3456789);
    PLONG_PTR plongPtrVal = reinterpret_cast<PLONG_PTR>(0xE4567890);
    PLONG32 plong32Val = reinterpret_cast<PLONG32>(0xF5678901);
    PLONG64 plong64Val = reinterpret_cast<PLONG64>(0x12345678);
    PSHORT pshortVal = reinterpret_cast<PSHORT>(0x23456789);
    PSIZE_T psizeTVal = reinterpret_cast<PSIZE_T>(0x34567890);
    PSSIZE_T pssizeTVal = reinterpret_cast<PSSIZE_T>(0x45678901);
    PSTR pstrVal = reinterpret_cast<PSTR>(0x56789012);
    PTBYTE ptbyteVal = reinterpret_cast<PTBYTE>(0x67890123);
    PTCHAR ptcharVal = reinterpret_cast<PTCHAR>(0x78901234);
    PTSTR ptstrVal = reinterpret_cast<PTSTR>(0x89012345);
    PUCHAR pucharVal = reinterpret_cast<PUCHAR>(0x90123456);
    PUHALF_PTR puhfPtrVal = reinterpret_cast<PUHALF_PTR>(0xA0123456);
    PUINT puintVal = reinterpret_cast<PUINT>(0xB1234567);
    PUINT_PTR puintPtrVal = reinterpret_cast<PUINT_PTR>(0xC2345678);
    // PUINT8 puint8Val = reinterpret_cast<PUINT8>(0xD3456789);
    // PUINT16 puint16Val = reinterpret_cast<PUINT16>(0xE4567890);
    PUINT32 puint32Val = reinterpret_cast<PUINT32>(0xF5678901);
    PUINT64 puint64Val = reinterpret_cast<PUINT64>(0x12345678);
    PULONG pulongVal = reinterpret_cast<PULONG>(0x23456789);
    PULONGLONG pulonglongVal = reinterpret_cast<PULONGLONG>(0x34567890);
    PULONG_PTR pulongPtrVal = reinterpret_cast<PULONG_PTR>(0x45678901);
    PULONG32 pulong32Val = reinterpret_cast<PULONG32>(0x56789012);
    PULONG64 pulong64Val = reinterpret_cast<PULONG64>(0x67890123);
    PUSHORT pushortVal = reinterpret_cast<PUSHORT>(0x78901234);
    PVOID pvoidVal = reinterpret_cast<PVOID>(0x89012345);
    PWCHAR pwcharVal = reinterpret_cast<PWCHAR>(0x90123456);
    PWORD pwordVal = reinterpret_cast<PWORD>(0xA0123456);
    PWSTR pwstrVal = reinterpret_cast<PWSTR>(0xB1234567);
    // QWORD qwordVal = reinterpret_cast<QWORD>(0xC2345678);
    SC_HANDLE schandleVal = reinterpret_cast<SC_HANDLE>(0xD3456789);
    SC_LOCK sclockVal = reinterpret_cast<SC_LOCK>(0xE4567890);
    // SERVICE_STATUS_HANDLE serviceStatusHandleVal = reinterpret_cast<SERVICE_STATUS_HANDLE>(0xF5678901);
    SHORT shortVal = static_cast<SHORT>(0x12345678);
    SIZE_T sizeTVal = static_cast<SIZE_T>(0x23456789);
    SSIZE_T ssizeTVal = static_cast<SSIZE_T>(0x34567890);
    TBYTE tbyteVal = static_cast<TBYTE>(0x45678901);
    TCHAR tcharVal = static_cast<TCHAR>(0x56789012);
    UCHAR ucharVal = static_cast<UCHAR>(0x67890123);
    UHALF_PTR uhfPtrVal = static_cast<UHALF_PTR>(0x78901234);
    UINT uintVal = reinterpret_cast<UINT>(0x89012345);
    UINT_PTR uintPtrVal = static_cast<UINT_PTR>(0x90123456);
    UINT8 uint8Val = static_cast<UINT8>(0xA0123456);
    UINT16 uint16Val = static_cast<UINT16>(0xB1234567);
    UINT32 uint32Val = reinterpret_cast<UINT32>(0xC2345678);
    UINT64 uint64Val = static_cast<UINT64>(0xD3456789);
    ULONG ulongVal = static_cast<ULONG>(0xE4567890);
    ULONGLONG ulonglongVal = static_cast<ULONGLONG>(0xF5678901);
    ULONG_PTR ulongPtrVal = static_cast<ULONG_PTR>(0x12345678);
    ULONG32 ulong32Val = static_cast<ULONG32>(0x23456789);
    ULONG64 ulong64Val = static_cast<ULONG64>(0x34567890);
    USHORT ushortVal = static_cast<USHORT>(0x45678901);
    USN usnVal = static_cast<USN>(0x56789012);
    WCHAR wcharVal = static_cast<WCHAR>(0x67890123);
    WORD wordVal = static_cast<WORD>(0x78901234);
    WPARAM wparamVal = static_cast<WPARAM>(0x89012345);


    // std::cout << "Result for INT: " << BOIL(intVal) << std::endl;
    // std::cout << "Result for INT_PTR: " << BOIL(intPtrVal) << std::endl;
    // std::cout << "Result for INT8: " << BOIL(int8Val) << std::endl;
    // std::cout << "Result for INT16: " << BOIL(int16Val) << std::endl;
    // std::cout << "Result for INT32: " << BOIL(int32Val) << std::endl;
    // std::cout << "Result for INT64: " << BOIL(int64Val) << std::endl;
    // std::cout << "Result for LANGID: " << BOIL(langidVal) << std::endl;
    // std::cout << "Result for LCID: " << BOIL(lcidVal) << std::endl;
    // std::cout << "Result for LCTYPE: " << BOIL(lctypeVal) << std::endl;
    // std::cout << "Result for LGRPID: " << BOIL(lgrpidVal) << std::endl;
    // std::cout << "Result for LONG: " << BOIL(longVal) << std::endl;
    // std::cout << "Result for LONGLONG: " << BOIL(longLongVal) << std::endl;
    // std::cout << "Result for LONG_PTR: " << BOIL(longPtrVal) << std::endl;
    // std::cout << "Result for LONG32: " << BOIL(long32Val) << std::endl;
    // std::cout << "Result for LONG64: " << BOIL(long64Val) << std::endl;
    // std::cout << "Result for LPARAM: " << BOIL(lparamVal) << std::endl;
    std::cout << "Result for LPBOOL: " << BOIL(lpboolVal) << std::endl;
    std::cout << "Result for LPBYTE: " << BOIL(lpbyteVal) << std::endl;
    // std::cout << "Result for LPCOLORREF: " << BOIL(lpcolorrefVal) << std::endl;
    std::cout << "Result for LPCSTR: " << BOIL(lpstrVal) << std::endl;
    std::cout << "Result for LPCTSTR: " << BOIL(lptstrVal) << std::endl;
    std::cout << "Result for LPCVOID: " << BOIL(lpvoidVal) << std::endl;
    std::cout << "Result for LPCWSTR: " << BOIL(lpcwstrVal) << std::endl;
    std::cout << "Result for LPDWORD: " << BOIL(lpdwordVal) << std::endl;
    std::cout << "Result for LPHANDLE: " << BOIL(lphandleVal) << std::endl;
    std::cout << "Result for LPINT: " << BOIL(lpintVal) << std::endl;
    std::cout << "Result for LPLONG: " << BOIL(lplongVal) << std::endl;
    std::cout << "Result for LPSTR: " << BOIL(lpstr2Val) << std::endl;


    return 0;
}
